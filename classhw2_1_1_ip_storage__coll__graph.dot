digraph "hw2::IpStorage"
{
 // INTERACTIVE_SVG=YES
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{hw2::IpStorage\n||+ IpStorage()\l+ add()\l+ add()\l+ getAllIps()\l+ getIpsContainsByte()\l+ clear()\l+ empty()\l+ filteredByFirstBytes()\l- validateIp()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -_storage" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{multiset\< IpV4 \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -_ipRestrictions" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{hw2::IpStorage::IpBoundaries\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structhw2_1_1_ip_storage_1_1_ip_boundaries.html"];
  Node4 -> Node3 [color="grey25",fontsize="10",style="solid",label=" +min\n+max" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{hw2::IpV4\n||+ IpV4()\l+ IpV4()\l+ IpV4()\l+ byte()\l+ byte()\l+ contains()\l+ operator=()\l+ operator\<()\l+ operator\>()\l+ bytesNumber()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classhw2_1_1_ip_v4.html"];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -BYTES_NUMBER" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{static constexpr size_t\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node6 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -_data" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{array\< Byte, BYTES\l_NUMBER \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
